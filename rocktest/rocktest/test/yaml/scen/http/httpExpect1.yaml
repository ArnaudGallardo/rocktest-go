# Test expectations in HTTP requests

- title: Tests HTTP Mock

# Spin a mock
- http.mock:
  params:
    port: 8080
    headers:
      content-type: application/json
    when:
      - uri: /singer/springsteen
        method: get
        response:
          code: 200
          body: >-
            {
              "fullname": "Bruce Springsteen aka The Boss",
              "bestsong": "Born in the USA"
            }
      - uri: /singer/springsteen
        method: post
        response:
          code: 200
          body: >-
            {
              "fullname": "Bruce Springsteen aka The Boss",
              "bestsong": "Born in the USA"
            }

# Call the mock, check return code
- http.get: 
  params:
    url: http://localhost:8080/singer/springsteen
    expect:
      code: 200


# Check JSON body
- http.get:
  params:
    url: http://localhost:8080/singer/springsteen
    expect:
      body.json:
        bestsong: Born in the USA


# Check JSON body with a variable and multiple notation
# to check JSON Path and regex
- var: song = Born

- http.get:
  desc: Check with Map syntax (prefered option)
  params:
    url: http://localhost:8080/singer/springsteen
    expect:
      code: 201|200
      body.json:
        bestsong: ${song} .. the ...
        '["fullname"]': Springsteen
      body.match:
        - Springsteen
        - |
          .*
            "bestsong": "Born in the USA"

        - "\n  \"bestsong\": \"Born in the USA\"\n"
        - '\n  "bestsong": "Born in the USA"\n'
        
