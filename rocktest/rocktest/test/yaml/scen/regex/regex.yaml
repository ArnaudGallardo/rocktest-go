# Basic test : match

- regex.match:
  params:
    pattern: ro.k
    string: rock

- assert.equals:
  desc: Basic regex check - match
  params:
    expected: true
    actual: ${match.result}

# Basic test : no match

- regex.match:
  params:
    pattern: ro.k
    string: rocK

- assert.equals:
  desc: Basic regex check - no match
  params:
    expected: false
    actual: ${match.result}

# Extraction

- regex.match:
  params:
    string: I love INXS and Mick Jagger but not XX
    pattern: I love (.*) and (.*) but not (.*)

- assert.equals:
  desc: Extraction
  params:
    expected: true
    actual: ${match.result}

- assert.equals:
  desc: Extraction
  params:
    expected: INXS
    actual: ${match.1}

- assert.equals:
  desc: Extraction
  params:
    expected: Mick Jagger
    actual: ${match.2}

- assert.equals:
  desc: Extraction
  params:
    expected: XX
    actual: ${match.3}

# Extraction with unset group

- regex.match:
  params:
    string: I love INXS but not XX
    pattern: I love (.*) (?:and (.*) )?but not (.*)

- assert.equals:
  desc: Extraction
  params:
    expected: true
    actual: ${match.result}

- assert.equals:
  desc: Extraction
  params:
    expected: INXS
    actual: ${match.1}

- assert.equals:
  desc: Extraction with empty variable
  params:
    expected: ''
    actual: ${match.2}

- assert.equals:
  desc: Extraction with unset variable
  params:
    expected: unset
    actual: ${match.4::unset}

- assert.equals:
  desc: Extraction
  params:
    expected: XX
    actual: ${match.3}

# Inline syntax

- assert.equals:
  desc: Inline syntax
  params:
    expected: Mark
    actual: ${$regex.match(I love (.*) and (.*),I love Bruce and Mark).2}
